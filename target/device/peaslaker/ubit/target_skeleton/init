#!/bin/ash
# We first set up the environment
export PATH="/usr/sbin:/usr/bin:/sbin:/bin"

	startup_date () {
                t=0
                devs=`find /dev -type b`
                for d in $devs; do
                        results=`tune2fs -l $d 2> /dev/null`
                        if [ $? = 0 ]; then
                                for i in 'Last write time:' 'Last mount time:' 'Filesystem created:' 'Last checked:' ; do
					srch=`echo "$results" | grep "$i"`
					echo $srch
					srch=${srch#*${i}}
					echo $srch
					srch=${srch##*  }
					echo $srch
                                        tt=`/bin/date -D "%A %b %e %H:%M:%S %Y" -d "${srch}" +%s`
                                        if [ $tt -gt $t ]; then
                                                t=$tt
                                        fi
                                done
                        fi
                done
                /bin/date -s @$t
        }

	setup_env () {
		/bin/busybox mount -t proc proc	/proc	
		/bin/busybox mount -t sysfs sys	/sys
		/bin/busybox --install -s

		echo "/sbin/mdev" > /proc/sys/kernel/hotplug

		mkdir /dev/shm
		/sbin/mdev -s
		ln -s /proc/mounts /etc/mtab

		hostname -F /etc/hostname
	}

	kill_env () {
		echo "" > /proc/sys/kernel/hotplug

		umount /sys
		umount /proc
	}

	help () {
		echo MAINTENANCE SHELL
		echo
		echo The UBIT shell contains a number of useful macros for working with 
		echo UBI/UBIFS linux installs.  You can either work interactively 
		echo with UBIT or you can run macros in a script.
		echo
		echo The UBIT sequence for the initial install of a linux tarball from /dev/sda1
		echo would be:
		echo
		echo on /dev/sda1 prepare
		echo ubiformat_mtd3
		echo on /dev/sda1 flash
		echo
		echo LED flash sequences:
		echo 
		echo If you see an orange heartbeat, this is bad news.  It means the device 
		echo is sitting at a serial console prompt waiting to be rescued from a bad
		echo flash of mtd0.
		echo
		echo In case the system is running headless, the green hearbeat is shown now
		echo for having reached the maintenance shell, indicating that it is safe 
		echo to reset the device.
		echo
		echo "For details on the orange LED meanings, run the 'usage' command."
		echo
	}

	ubit () {
		export ENV=/usr/lib/ubit/profile/$1
		touch /tmp/exitcmd
		shift
		{ 
			echo export ENV=$ENV
			echo . $ENV
			echo . /root/.bashrc
			echo 'finished () { set `pidof init`; shift $(($#-2)); kill -9 $1; }'
			echo 'preboot () { [ -x "./init" ] && echo preboot `pwd` > /tmp/exitcmd; finished; }'
			echo 'reboot () { echo reboot > /tmp/exitcmd; finished; }'
			echo 'halt () { echo halt > /tmp/exitcmd; finished; }'
			echo "$@"
		} > /root/.profile 
		. ${ENV}
		/etc/init.d/rcS; statusled ERR ACK; /sbin/init; EXITCMD=`cat /tmp/exitcmd`
	}

	ubit_rootfs () {
		[ -e .ubit.boot ] || exit 0
		rm .ubit.boot
		ubit aufs "cd /root/rw" ; exit 1
	}

	ubit_aufs () {
		[ -e .ubit.boot ] || exit 0
		rm .ubit.boot
		ubit aufs "cd /root/newroot"; exit 1
	}

	ubit_full () {
		rm .ubit.boot 2>/dev/null
		ubit full
	}

	ubit_preboot () {
		ubit full
	}

	move_mounts () {
		for p ; do
			mkdir -p .aufs/$p
			mount --move ../$p .aufs/$p 
		done
	}

	mount_rw () {
		local rpath=$(findfs LABEL=rw)
		[ "$rpath" ] || rtype=tmpfs
		[ "$rtype" ] || rtype=auto
		[ "$rdelay" ] && sleep $rdelay
		case "$rtype" in
			"tmpfs")
				mount -t ubifs ubi:rw rw -o rw,relatime || mount -t tmpfs none rw
				;;
			"auto")
				mount -t ubifs ubi:rw rw -o rw,relatime || mount $rpath rw || ( sleep 10; mount $rpath rw ) || mount -t tmpfs none rw
				;;
			"preboot")
				ubirename /dev/ubi0 preboot ramdisk
				touch /tmp/preboot
				exit 1
				;;
			*)
				mount -t ubifs ubi:rw rw -o rw,relatime || mount -t $rtype $rpath rw || ( sleep 10 ; mount -t $rtype $rpath rw ) || mount -t tmpfs none rw
				;;
			esac	
		if [ -e rw/.ubit.preboot ]; then
			rm rw/.ubit.preboot 2>/dev/null
			umount rw
			touch /tmp/preboot
			exit 1
		fi
		exit 0
	}

	mount_rootfs () {
		[ "$rtype" ] || rtype=auto
		[ "$rdelay" ] && sleep $rdelay
		case "$rtype" in
			"auto")
				mount $rpath rw || ( sleep 10; mount $rpath rw ) || exit 1
				;;
			*)
				mount -t $rtype $rpath rw || ( sleep 10 ; mount -t $rtype $rpath rw ) || exit 1
				;;
			esac	
		if [ -e rw/.ubit.preboot ]; then
			rm rw/.ubit.preboot 2>/dev/null
			umount rw
			touch /tmp/preboot
			exit 1
		fi
		exit 0
	}

	mount_aufs () {
		mkdir ../newroot ../rootfs ../modules
		br='br:../rw=rw'

		mount -t ubifs ubi:modules ../modules -o ro,noatime && br=${br}':../modules=rr'
		mount -t ubifs ubi:rootfs  ../rootfs  -o ro,noatime && br=${br}':../rootfs=rr'
		for prt in `cat /etc/ubit/ubimounts`; do
			mkdir ../$prt
			mount -t ubifs ubi:$prt ../$prt -o ro,noatime && br=${br}":../${prt}=rr" 
		done
		mount -t aufs  aufs        ../newroot -o ${br}

		cd ../newroot
	}

	mount_dismantle () {
		cd ..
		umount newroot
		for prt in `cat /etc/ubit/ubimounts`; do
			umount  $prt
		done
		umount rootfs modules rw
	}

	mount_finalize () {
		move_mounts rw rootfs modules

		for prt in `cat /etc/ubit/ubimounts`; do
			move_mounts $prt
		done

		[ -e /etc/ubit/extramounts ] && . /etc/ubit/extramounts
	}

	_preboot () {
		cd "${1}"
		kill_env

		# do or die, the ramdisk hands over to the rootfs
		exec /bin/busybox switch_root . /init
	}

	rootmount () {
		set - `cat /proc/cmdline`
		while [ "$1" ]; do
			case "${1%%=*}" in
			"rootfstype")
				rtype=${1#*=}
				;;
			"rootdelay")
				rdelay=${1#*=}
				;;
			esac
			shift
		done

		if ( ubinfo -d 0 &>/dev/null ) && rpath=`findfs LABEL=rootfs` && ( mount_rootfs ); then
			# the ramdisk is installed and run from a UBI partition, there is a rootfs volume 
			startup_date
			cd rw    # this becomes our new rootfs

			if ( ubit_rootfs ); then  
				statusled on
			else
				killall ifplugd; statusled disconnect on; sleep 3; statusled flicker
				cd ..
				umount rw
				sleep 3; statusled off
				case "$EXITCMD" in
					reboot|halt) $EXITCMD -f;;
				esac
				reboot -f
			fi

		elif ( ubinfo -d 0 &>/dev/null ) && ! [ -e /tmp/preboot ] && ( mount_rw ); then
			# the ramdisk is installed and run from a UBI partition and we've been able to load a read/write partition
			startup_date

			cd rw
			mount_aufs

			# we process any ubit script now but we limit the options
			# because we have a mounted aufs partition.
			echo reboot > /tmp/exitcmd
			if ( ubit_aufs ); then  
				statusled on
				mount_finalize
			else
				killall ifplugd; statusled disconnect on; sleep 3; statusled flicker
				mount_dismantle
				sleep 3; statusled off
				case "$EXITCMD" in
					reboot|halt) $EXITCMD -f;;
					preboot*) $EXITCMD;;
				esac
				reboot -f
			fi

		elif [-e /tmp/preboot ]; then # this got set from preboot actions
			startup_date

			echo reboot > /tmp/exitcmd
			ubit_preboot

			killall ifplugd; statusled disconnect on; sleep 3; statusled off
			case "$EXITCMD" in
				reboot|halt) $EXITCMD -f;;
			esac
			reboot -f

		else # we are in maintenance mode
			startup_date

			ubit_full

			killall ifplugd; statusled disconnect on; sleep 3; statusled off
			case "$EXITCMD" in
				reboot|halt) $EXITCMD -f;;
			esac
			reboot -f
		fi
	}

# set a mountpoint into which we will try to switch_root
setup_env
mkdir -p /root/rw /tmp
cd /root

statusled busy
rootmount

echo "Executing switch_root and spawning init"
statusled on

bootargs=`cat /proc/cmdline`

kill_env
mv /dev/null dev 
mv /dev/console dev
mv /dev/tty1 dev 

# do or die, the ramdisk hands over to the rootfs
exec /bin/busybox switch_root . /sbin/init $bootargs
	
