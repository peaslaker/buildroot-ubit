#!/bin/ash
# We first set up the environment
export PATH="/usr/sbin:/usr/bin:/sbin:/bin"

	startup_date () {
                t=0
                devs=`find /dev -type b`
                for d in $devs; do
                        results=`tune2fs -l $d 2> /dev/null`
                        if [ $? = 0 ]; then
                                for i in 'Last write time:' 'Last mount time:' 'Filesystem created:' 'Last checked:' ; do
					srch=`echo "$results" | grep "$i"`
					echo $srch
					srch=${srch#*${i}}
					echo $srch
					srch=${srch##*  }
					echo $srch
                                        tt=`/bin/date -D "%A %b %e %H:%M:%S %Y" -d "${srch}" +%s`
                                        if [ $tt -gt $t ]; then
                                                t=$tt
                                        fi
                                done
                        fi
                done
                /bin/date -s @$t
        }

	setup_env () {
		/bin/busybox mount -t proc proc	/proc	
		/bin/busybox mount -t sysfs sys	/sys
		/bin/busybox --install -s

		echo "/sbin/mdev" > /proc/sys/kernel/hotplug
		mkdir /dev/shm
		/sbin/mdev -s
		ln -s /proc/mounts /etc/mtab

		hostname -F /etc/hostname
	}

	kill_env () {
		echo "" > /proc/sys/kernel/hotplug
		umount /sys
		umount /proc
	}

	help () {
		echo MAINTENANCE SHELL
		echo
		echo The UBIT shell contains a number of useful macros for working with 
		echo UBI/UBIFS linux installs.  You can either work interactively 
		echo with UBIT or you can run macros in a script.
		echo
		echo The UBIT sequence for the initial install of a linux tarball from /dev/sda1
		echo would be:
		echo
		echo on /dev/sda1 prepare
		echo ubiformat_mtd3
		echo on /dev/sda1 flash
		echo
		echo LED flash sequences:
		echo 
		echo If you see an orange heartbeat, this is bad news.  It means the device 
		echo is sitting at a serial console prompt waiting to be rescued from a bad
		echo flash of mtd0.
		echo
		echo In case the system is running headless, the green hearbeat is shown now
		echo for having reached the maintenance shell, indicating that it is safe 
		echo to reset the device.
		echo
		echo "For details on the orange LED meanings, run the 'usage' command."
		echo
	}

	ubit () {
		touch /tmp/ubit
		{ 
			echo export ENV=$ENV
			echo . $ENV
			echo . $HOME/.bashrc
		} > /root/.profile 

		(
			
			reboot() {
				touch /tmp/reboot		
			}

			. ${ENV}
			. /tmp/ubit
		)
		[ -e /tmp/reboot ] && REBOOT=true
	}

	ubit_aufs () {

		export ENV=/usr/lib/ubit/profile/aufs

		cat .ubit.once .ubit.action > /tmp/ubit 2>/dev/null
		rm .ubit.once 2>/dev/null

		ubit
	}

	ubit_full () {

		export ENV=/usr/lib/ubit/profile/full

		cat .ubit.once .ubit.action > /tmp/ubit 2>/dev/null
		rm .ubit.once 2>/dev/null

		ubit
	}

	ubit_preboot () {

		export ENV=/usr/lib/ubit/profile/full

		ubit
	}


	move_mounts () {
		for p ; do
			mkdir -p .aufs/$p
			mount --move ../$p .aufs/$p 
		done
	}

	mount_rw () {
		[ "$rtype" ] || rtype=auto
		[ "$rpath" ] || rpath=/dev/sda1
		[ "$rdelay" ] && sleep $rdelay
		case "$rtype" in
			"tmpfs")
				mount -t tmpfs none rw
				;;
			"auto")
				mount -t ubifs ubi:rw rw -o rw,relatime || mount $rpath rw || ( sleep 10; mount $rpath rw ) || mount -t tmpfs none rw
				;;
			*)
				mount -t ubifs ubi:rw rw -o rw,relatime || mount -t $rtype $rpath rw || ( sleep 10 ; mount -t $rtype $rpath rw ) || mount -t tmpfs none rw
				;;
			esac	
		if [ -e rw/.ubit.preboot ]; then
			mv rw/.ubit.preboot /tmp/ubit
			umount rw
			exit 1
		fi
		exit 0
	}

	mount_aufs () {
		mkdir ../newroot ../rootfs ../modules

		mount -t ubifs ubi:modules ../modules -o ro,noatime && \
		mount -t ubifs ubi:rootfs  ../rootfs  -o ro,noatime && \
		mount -t aufs  aufs        ../newroot -o br:../rw=rw:../rootfs=rr:../modules=rr && {
			for prt in `cat /etc/ubit/ubimounts`; do
				mkdir ../$prt
				mount -t ubifs ubi:$prt ../$prt -o ro,noatime && \ 
				mount ../newroot -o remount,append:../${prt}=rr
			done
		}

		cd ../newroot
	}

	mount_dismantle () {
		cd ..
		umount newroot
		for prt in `cat /etc/ubit/ubimounts`; do
			umount  $prt
		done
		umount rootfs modules rw
	}

	mount_finalize () {
		move_mounts rw rootfs modules

		for prt in `cat /etc/ubit/ubimounts`; do
			move_mounts $prt
		done

		[ -e /etc/ubit/extramounts ] && . /etc/ubit/extramounts
	}

	rootmount () {
		REBOOT=false
		set - `cat /proc/cmdline`
		while [ "$1" ]; do
			case "${1%%=*}" in
			"root")
				rpath=${1#*=}
				;;
			"rootfstype")
				rtype=${1#*=}
				;;
			"rootdelay")
				rdelay=${1#*=}
				;;
			esac
			shift
		done

		if ( ubinfo -d 0 &>/dev/null ) && ( mount_rw ); then
			startup_date

			cd rw
			mount_aufs

			# we process any ubit script now but we limit the options
			# because we have a mounted aufs partition.
			ubit_aufs
			
			if $REBOOT ; then
				mount_dismantle
				exec reboot -f
			else
				mount_finalize
			fi

		elif [ -e /tmp/.ubit.preboot ]; then
			echo Waiting for USB system to stabilise
			sleep 10

			startup_date
			/etc/init.d/rcS

			ubit_preboot
			exec reboot -f

		else # we are in maintenance mode
			echo Waiting for USB system to stabilise
			sleep 10

			startup_date
			/etc/init.d/rcS

			echo mounting whatever we find on /dev/sda1
			mount /dev/sda1 rw && {
				(	
					cd rw
					ubit_full
				)
				umount /dev/sda1
			}

			# about to enter the shell, so this is a safe "commands complete" position and gets the green set on
			statusled ERR
			statusled ACK

			if $REBOOT; then
				exec reboot -f
			fi

			exec /sbin/init
		fi
	}

# set a mountpoint into which we will try to switch_root
setup_env
statusled busy

mkdir -p /root/rw /tmp
cd /root
rootmount

echo "Executing switch_root and spawning init"
statusled on

bootargs=`cat /proc/cmdline`

kill_env
mv /dev/null dev 
mv /dev/console dev
mv /dev/tty1 dev 

# do or die, the ramdisk hands over to the rootfs
exec /bin/busybox switch_root . /sbin/init $bootargs

	
