#!/bin/ash
# We first set up the environment
export ENV=/etc/profile
export PATH="/usr/sbin:/usr/bin:/sbin:/bin"

/bin/busybox mount -t proc proc	/proc	
/bin/busybox mount -t sysfs sys	/sys
/bin/busybox --install -s

echo "/sbin/mdev" > /proc/sys/kernel/hotplug
mkdir /dev/shm
/sbin/mdev -s
ln -s /proc/mounts /etc/mtab

. /usr/lib/ubit/functions/general

# then we do the real init
# function definitions

	help () {
		echo MAINTENANCE SHELL
		echo
		echo The /ubit shell contains a number of useful macros for working with 
		echo UBI/UBIFS linux installs.  You can either work interactively 
		echo with UBIT by running /ubit directly or you can provide a script.
		echo
		echo The UBIT sequence for the initial install of a linux image from /dev/sda1
		echo would be:
		echo
		echo ubiattach_mtd3
		echo on /dev/sda1 install [password]
		echo
		echo LED flash sequences:
		echo 
		echo If you see an Orange heartbeat, this is bad news.  It means the device 
		echo is sitting at a serial console prompt waiting to be rescued from a bad
		echo flash of mtd0.
		echo
		echo In case the system is running headless, the green hearbeat is shown now
		echo for having reached the maintenance shell, indicating that it is safe 
		echo to reset the device.
		echo
		echo For details on the orange LED meanings, run the /ubit command.
		echo
	}

	move_mounts () {
		for p ; do
			mkdir -p .aufs/$p
			mount --move ../$p .aufs/$p 
		done
	}

	mount_rw () {
		[ "$rtype" ] || rtype=auto
		[ "$rpath" ] || rpath=/dev/sda1
		[ "$rdelay" ] && sleep $rdelay
		case "$rtype" in
			"tmpfs")
				mount -t tmpfs none rw
				;;
			"auto")
				mount -t ubifs ubi:rw rw -o rw,relatime || mount $rpath rw || ( sleep 10; mount $rpath rw ) || mount -t tmpfs none rw
				;;
			*)
				mount -t ubifs ubi:rw rw -o rw,relatime || mount -t $rtype $rpath rw || ( sleep 10 ; mount -t $rtype $rpath rw ) || mount -t tmpfs none rw
				;;
			esac	
		if [ -e rw/.ubit.preboot ]; then
			mv rw/.ubit.preboot /tmp
			umount rw
			exit 1
		fi
		exit 0
	}

	mount_aufs () {
		mkdir ../newroot ../rootfs ../modules

		mount -t ubifs ubi:modules ../modules -o ro,noatime && \
		mount -t ubifs ubi:rootfs  ../rootfs  -o ro,noatime && \
		mount -t aufs  aufs        ../newroot -o br:../rw=rw:../rootfs=rr:../modules=rr && {
			for prt in `cat /etc/ubit/ubimounts`; do
				mkdir ../$prt
				mount -t ubifs ubi:$prt ../$prt -o ro,noatime && \ 
				mount ../newroot -o remount,append:../${prt}=rr
			done
		}

		cd ../newroot
	}

	mount_finalize () {
		move_mounts rw rootfs modules

		for prt in `cat /etc/ubit/ubimounts`; do
			move_mounts $prt
		done

		[ -e /etc/ubit/extramounts ] && . /etc/ubit/extramounts
	}

	rootmount () {
		set - `cat /proc/cmdline`
		while [ "$1" ]; do
			case "${1%%=*}" in
			"root")
				rpath=${1#*=}
				;;
			"rootfstype")
				rtype=${1#*=}
				;;
			"rootdelay")
				rdelay=${1#*=}
				;;
			esac
			shift
		done

		if ( ubinfo -d 0 &>/dev/null ) && ( mount_rw ); then
			cd rw
			mount_aufs

			# we process any ubit script now but we limit the options
			# because we have a mounted aufs partition.
			ubit-aufs
			mount_finalize

		elif [ -e /tmp/.ubit.preboot ]; then
			ubit-preboot
			reboot -f

		else # we are in maintenance mode
			echo Waiting for USB system to stabilise
			sleep 10

			# source the ub bootloader functions
			. /usr/lib/ubit/functions/bootloader
			bl_uptodate

			echo mounting whatever we find on /dev/sda1
			mount /dev/sda1 rw && {
				(	
					cd rw
					# we process any ubit scripts now
					ubit-full
				)  
				umount /dev/sda1
			}

			# about to enter the shell, so this is a safe "commands complete" position and gets the green heartbeat
			orange_off
			green_heartbeat

			if [ -e /tmp/reboot ]; then
				reboot -f
			fi
			help
			export ENV=/usr/lib/ubit/profile/full
			exec /bin/ash
		fi
	}

# set a mountpoint into which we will try to switch_root
green_off
orange_flash 

mkdir -p /workarea/rw /tmp
cd /workarea
rootmount

echo "Executing switch_root and spawning init"
orange_off

bootargs=`cat /proc/cmdline`

echo "" > /proc/sys/kernel/hotplug
umount /sys
umount /proc
mv /dev/null dev 
mv /dev/console dev
mv /dev/tty1 dev 

# do or die, the ramdisk hands over to the rootfs
exec /bin/busybox switch_root . /sbin/init $bootargs

	
