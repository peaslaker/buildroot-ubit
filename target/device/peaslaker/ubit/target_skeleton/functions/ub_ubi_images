# ubimg handling functions
	write_partition () {
		prt=$1
		lebcnt=$2
		suffix=$3
		echo UBIT.WRITE:$prt$suffix:writing ubi partition

 		[ -z "$suffix" ] && ubirmvol /dev/ubi0 -N ${prt}
 		msg=`ubimkvol /dev/ubi0 -N ${prt}${suffix} -S $lebcnt` && \
			msg=${msg%%,*} && \
			ubivolno=${msg##* } && \
			ubiupdatevol /dev/ubi0_$ubivolno ${prt}.ubimg
		}

	ubimg () {
		lebcnt=$1
	
		echo UBIT.UBIMG:$prt:trying mkfs.ubifs in $lebcnt LEBs...
		while true; do
			mkfserror=`mkfs.ubifs -r ${prt} -m 2048 -e 129024 -c $lebcnt -o ${prt}.ubimg 2>&1 1> /dev/null` 
			if [ "$?" -eq "0" ] ; then
				echo $pth $prt $lebcnt $suffix >> /.ubit.images
				exit 0
			elif [ "${mkfserror%% (*}" = "Error: max_leb_cnt too low" ]; then
				echo UBIT.UBIMG:$prt:$mkfserror
				mkfserror=${mkfserror##*(}
				lebcnt=${mkfserror%% *}
				echo UBIT.UBIMG:$prt:retrying mkfs.ubifs in $lebcnt LEBs...
			else
				echo UBIT.UBIMG:$prt:unknown error creating .ubimg:$lebcnt
				echo UBIT.UBIMG:$prt:$mkfserror
				exit 1
			fi
		done
	}

	flash () {
		# this is where we write to NAND memory  we need a description file for the images, which will either be in the ramdisk or on the working directory

		imgs=/.ubit.images
		[ -e .ubit.images ] && imgs=.ubit.images

        	# this is about to take a long time
			echo 100 > /sys/class/leds/status\:orange\:misc/delay_off
			echo 1000 > /sys/class/leds/status\:orange\:misc/delay_on

		cat $imgs | while read pth prt lebcnt suffix
		do
			( cd $pth 
                		write_partition $prt $lebcnt $suffix
                	)
        	done

		[  "`cat /.ubit.rename`" ] &&  ubirename /dev/ubi0 `cat /.ubit.rename`
	}
