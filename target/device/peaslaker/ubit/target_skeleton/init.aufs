# the init.go script gets sourced by the parent init script.  The reason for this is that the trailing portion of the 
# script is dynamically generated by the init.ubit script and it keeps all the code together for setting up the rootfs
#Â leaving the generic init script available for setting up a busybox environment.
# Also, the script moves the directory to the target switch_root directory

# rw is already mounted and we should have been moved to rw

mkdir ../newroot ../rootfs ../modules

move_mounts () {
	for p ; do
		mkdir -p .aufs/$p
		mount --move ../$p .aufs/$p 
		done
	}

mount -t ubifs ubi:modules ../modules -o ro,noatime && \
mount -t ubifs ubi:rootfs ../rootfs -o ro,noatime && \
mount -t aufs aufs ../newroot -o br:../rw=rw:../rootfs=rr:../modules=rr

for prt in `cat /.ubit.ubimounts`; do
	mkdir ../$prt
	mount -t ubifs ubi:$prt ../$prt -o ro,noatime 
	mount ../newroot -o remount,append:../${prt}=rr
	done

cd ../newroot

# if we have a file containing ubit options and we have ubit, we process them now but we limit the options
# because we have a mounted aufs partition.

[ -e .ubit.oneshot ] && cat .ubit.oneshot > .ubit.last && rm .ubit.oneshot && cat .ubit.last .ubit.action | /ubit -aufs

move_mounts rw rootfs modules

for prt in `cat /.ubit.ubimounts`; do
	move_mounts $prt
	done

[ -e /.ubit.extramounts ] && . /.ubit.extramounts
