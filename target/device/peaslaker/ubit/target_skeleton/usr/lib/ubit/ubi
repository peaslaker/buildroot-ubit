	_boot_mode () {
		case $1 in
			fast|silent|ramdisk|preboot)
				if ( ubinfo -d 0 -N $1 &>/dev/null ); then
				# do nothing
					echo boot mode is $1
				elif ( ubinfo -d 0 -N ramdisk &>/dev/null ); then
					echo boot mode was ramdisk/normal
					ubirename /dev/ubi0 ramdisk $1
					echo boot mode set to $1
				elif ( ubinfo -d 0 -N fast &>/dev/null ); then
					echo boot mode was fast
					ubirename /dev/ubi0 fast $1
					echo boot mode set to $1
				elif ( ubinfo -d 0 -N silent &>/dev/null ); then
					echo boot mode was silent
					ubirename /dev/ubi0 silent $1
					echo boot mode set to $1
				elif ( ubinfo -d 0 -N preboot &>/dev/null ); then
					echo boot mode was preboot
					ubirename /dev/ubi0 preboot $1
					echo boot mode set to $1
				else
					echo no boot mode present
				fi
			;;
		esac		
	}

	boot_silent () {
		_boot_mode silent
	}

	boot_fast () {
		_boot_mode fast
	}

	boot_normal () {
		_boot_mode ramdisk
	}

	boot_preboot () {
		_boot_mode preboot
	}

	rmrw () {
		( ubinfo -d 0 -N rw &>/dev/null ) && ubirmvol /dev/ubi0 -N rw
	}

	mkrw () {
		rmrw

		lebs=`ubinfo -d 0`
		lebs=${lebs#*available logical eraseblocks: }
		lebs=${lebs%% *}

		ubimkvol /dev/ubi0 -N rw -S ${lebs}
	}

	ubiformat_mtd3 () {
		( ubinfo -d 0 &>/dev/null ) && ubidetach /dev/ubi_ctrl -m 3
		ubiformat /dev/mtd3
		ubiattach /dev/ubi_ctrl -m 3
	}			

	ubiattach_mtd3 () {
		ubiattach /dev/ubi_ctrl -m 3
	}

	_ubi_write_partition () {
		prt=$1
		lebcnt=$2
		echo UBIT.WRITE:$prt:writing ubi partition

 		( ubinfo -d 0 -N $prt &>/dev/null ) && ubirmvol /dev/ubi0 -N ${prt}
 		msg=`ubimkvol /dev/ubi0 -N ${prt} -S $lebcnt` && \
			msg=${msg%%,*} && \
			ubivolno=${msg##* } && \
			ubiupdatevol /dev/ubi0_$ubivolno ${prt}.ubimg
		}

	install () {

        	statusled progress	# this is about to take a long time

		_boot_mode ramdisk

		cat /etc/ubit/images | while read pth prt lebcnt
		do
			( cd $pth 
                		_ubi_write_partition $prt $lebcnt
                	)
        	done
		if [ "$1" = "mkrw" ]; then
			mkrw
		fi
		statusled idle
	}

	kernel () {
		statusled progress
		cat /usr/share/ubit/targets/kernel > /tmp/targets

		echo UBIT.KERNEL:purging old work environment...
		rm -rf "${OUTDIR}.ubit"
		mkdir -p "${OUTDIR}.ubit/boot" "${OUTDIR}.ubit/rootfs"

		# The kernel content can either be unpacked or gzipped tarball in the working directory.  Unpacked 
		# is handled here. tar.gz is handled in _ubit_scan

		echo UBIT.KERNEL:extracting boot...
		tar -c boot lib/modules | tar -C "${OUTDIR}.ubit/rootfs" -x 

		(
			[ "${OUTDIR}" ] && cd "${OUTDIR}"
			_ubit_scan boot modules
		)
		statusled idle
	}


