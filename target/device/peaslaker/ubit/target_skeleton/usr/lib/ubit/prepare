	template () {
		if [ "$1" ]; then
			[ -e "/usr/share/ubit/targets/$1" ] && cat "/usr/share/ubit/targets/$1" > /etc/ubit/targets
		else
			cat /usr/share/ubit/targets/default > /etc/ubit/targets
		fi
	}

	_ubit_ubimg () {
		lebcnt=$1
	
		echo UBIT.UBIMG:$prt:trying mkfs.ubifs in $lebcnt LEBs...
		while true; do
			mkfserror=`mkfs.ubifs -r ${prt} -m 2048 -e 129024 -c $lebcnt -o ${prt}.ubimg 2>&1 1> /dev/null` 
			if [ "$?" -eq "0" ] ; then
				echo $pth $prt $lebcnt  >> /etc/ubit/images
				exit 0
			elif [ "${mkfserror%% (*}" = "Error: max_leb_cnt too low" ]; then
				echo UBIT.UBIMG:$prt:$mkfserror
				mkfserror=${mkfserror##*(}
				lebcnt=${mkfserror%% *}
				echo UBIT.UBIMG:$prt:retrying mkfs.ubifs in $lebcnt LEBs...
			else
				echo UBIT.UBIMG:$prt:unknown error creating .ubimg:$lebcnt
				echo UBIT.UBIMG:$prt:$mkfserror
				exit 1
			fi
		done
	}

	is_prepared () {
		[ -e .ubit/images ] && [ -e .ubit/ubimounts ] && [ -e .ubit/extramounts ] && echo true
		echo false
	}

	ready_prepared () {
		statusled active

		if ($(is_prepared)); then
			cat .ubit/images > /etc/ubit/images
			cat .ubit/extramounts > /etc/ubit/extramounts
			cat .ubit/ubimounts > /etc/ubit/ubimounts
			touch /etc/ubit/images
			touch /etc/ubit/extramounts
			touch /etc/ubit/ubimounts

			# this odd twist sets the ramdisk contents after the scan has completed but before the writes begin
			mkdir -p .ubit/ramdisk
			cat /etc/ubit/cpio_list | cpio -H newc -o | gzip > /tmp/initramfs.cpio.gz
			mkimage -A arm -O linux -T ramdisk -C gzip -a 0x0 -e 0x0 -n "UBIT-`cat /etc/br-version`" -d /tmp/initramfs.cpio.gz .ubit/ramdisk/uInitrd

			(  	cd .ubit
				pth=.ubit
				prt=ramdisk
			 	_ubit_ubimg 32
			)
		fi

		statusled idle
	}

	_ubit_scan () {

		# by the time we get here, there will be:
		# - some sort of filesystem image available for analysis mounted on .ubit/rootfs
		# - a populated targs variable listing the work to be done

		uni="$@"
		echo $uni

		statusled active

		rm /tmp/.scanimages
		rm /etc/ubit/images
		rm /etc/ubit/extramounts
		rm /etc/ubit/ubimounts
		touch /etc/ubit/images
		touch /etc/ubit/extramounts
		touch /etc/ubit/ubimounts

		sort -r /tmp/targets | while true; do 
			read pth prt ubiprt
			if [ "$?" -eq "0" ] ; then
				if [ "${prt}" = "" ]; then
					echo UBIT.SCAN:${pth}, leaving a stub
					mkdir -p .ubit/rootfs/${pth}
					rm -rf .ubit/rootfs/${pth}/* 2> /dev/null
				elif [ "${prt}" = "tmpfs" ]; then
					echo UBIT.SCAN:${pth}, leaving a stub for tmpfs mount
					mkdir -p .ubit/rootfs/${pth}
					rm -rf .ubit/rootfs/${pth}/* 2> /dev/null
					echo mount -t tmpfs none $pth >> /etc/ubit/extramounts
				elif [ "${prt}" = "ubi" ]; then
					prt=${ubiprt}
					echo UBIT.SCAN:${pth}, moved to staging area for ${prt}.ubimg 
					uni="${uni} ${prt}"
					mkdir -p .ubit/${prt}/${pth}
					mv .ubit/rootfs/${pth}/* .ubit/${prt}/${pth} 2>/dev/null
					rm -rf .ubit/rootfs/${pth} 2> /dev/null
				else
					echo UBIT.SCAN:${pth}, moved archive area .prt/${prt}
					mkdir -p .prt/${prt}/${pth}
					mv .ubit/rootfs/${pth}/* .prt/${prt}/${pth} 2> /dev/null
					rm -rf .ubit/rootfs/${pth} 2> /dev/null
				fi
			else
				echo UBIT.SCAN:all targets read, now processing ubi target volumes...
				echo First attempt for each volume tries with a small maximum LEB count which may fail, but the error 
				echo tells us the number of LEBs to retry.  It takes a bit of time and sometimes it misses
				echo by 1, and has to retry a third time.  It is reliable though.  Normal operation involves
				echo error messages for each failed attempt, including segmentation faults.
				echo
				for prt in `echo ${uni} | tr " " "\n" | sort -ur` ; do
					echo UBIT.SCAN:processing ubi target volume: ${prt}
					case ${prt} in
					boot)
						mkdir -p .ubit/boot/boot
						[ -e boot.tar.gz ] && tar -C .ubit/boot/boot -xzf boot.tar.gz 
						echo .ubit/boot $prt 32 >> /tmp/.scanimages
						;;
					ramdisk)
						# this noop means that the ramdisk ubimg only gets created by the 'ready_prepared' function
						;;
					modules)
						mkdir -p .ubit/modules
						[ -e modules.tar.gz ] && tar -C .ubit/modules -xzf modules.tar.gz
						echo .ubit $prt 32 >> /tmp/.scanimages
						;;
					rootfs)
						mkdir -p .ubit/rootfs
						echo .ubit $prt 32 >> /tmp/.scanimages
						;;
					*)
						echo .ubit $prt 32 >> /tmp/.scanimages
						echo $prt >> /etc/ubit/ubimounts
						;;
					esac
				done

				statusled progress

				# now we write all the images
				cat /tmp/.scanimages | while read pth prt lebcnt; do
					( cd $pth
						_ubit_ubimg $lebcnt
					)
				done
				cat /etc/ubit/images > .ubit/images
				cat /etc/ubit/extramounts > .ubit/extramounts
				cat /etc/ubit/ubimounts > .ubit/ubimounts
				break
			fi

		done
		statusled busy
	}

	_prepare () {
		local tarball="${1}"
		[ "${tarball}" ] || tarball=rootfs.tar.gz
		if [ -e .ubit.targets ]; then
			cat .ubit.targets > /tmp/targets
		else
			cat /etc/ubit/targets > /tmp/targets	
		fi

		statusled progress	# this is about to take a long time

		echo UBIT.PREPARE:purging old work environment...
		rm -rf "${OUTDIR}.ubit" "${OUTDIR}.prt"
		mkdir -p "${OUTDIR}.ubit/rootfs" "${OUTDIR}.prt"

		echo UBIT.PREPARE:extracting rootfs...
		
		tar -C "${OUTDIR}.ubit/rootfs" -xf "${tarball}" || tar -C "${OUTDIR}.ubit/rootfs" -xzf "${tarball}"
	}

	_prepare_scan () {
		(
			[ "${OUTDIR}" ] && cd "${OUTDIR}"
			cat /usr/share/ubit/start_ubit > ".ubit/rootfs/sbin/start_ubit"
			chmod u+x ".ubit/rootfs/sbin/start_ubit"
			_ubit_scan boot modules rootfs
			ready_prepared
		)
		statusled idle
	}

	prepare () {
		_prepare "${1}"
		_prepare_scan
	}
