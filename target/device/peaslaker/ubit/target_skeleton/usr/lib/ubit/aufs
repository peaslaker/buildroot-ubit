	install () {
		local RW
		[ "$1" = "mkrw" ] && RW="mkrw" 

		if [ -f /tmp/redirect_on ]; then
			set `cat /tmp/redirect_on`
			{	echo on $2 ready_prepared
				echo ubiformat_mtd3
				echo on $2 install $RW
			} 	> "/root/newroot/.ubit.preboot"
			echo "The following commands have been set as preboot actions:"
			echo
			echo "`cat /root/newroot/.ubit.preboot`"
			echo
			echo "The machine is now rebooting to complete the install process."
			reboot
		fi
	}

	_snapshot () {
		if [ -e .ubit.targets ]; then
			cat .ubit.targets > /tmp/targets
		else
			cat /etc/ubit/targets > /tmp/targets
			kver=`uname -r`
			echo usr/src/${kver} ubi modules >> /tmp/targets	
			echo usr/src/linux-2.6 ubi modules >> /tmp/targets	
			( 	cd usr/src
				ln -sf ${kver} linux-2.6
				)
			fi

		statusled progress			# this is about to take a long time

		# Because busybox tar is very limited we have to jump through hoops to prevent our tarball copy from recursing

		uniq=`ls | md5sum`
		uniq=${uniq%% *}

		echo UBIT.SNAPSHOT:purging old work environment...
		rm -rf "${OUTDIR}.ubit" "${OUTDIR}.prt"
		mkdir -p "${OUTDIR}.ubit/${uniq}"

		mkdir -p boot     # have to make sure the mount point exists.  e.g. pacman -R kernel26-withlinux will remove the mountpoint
		mount -t ubifs ubi:boot boot

		echo UBIT.SNAPSHOT:extracting rootfs...
		tar -c . --exclude ".ubit/${uniq}" | tar -C "${OUTDIR}.ubit/${uniq}" -x 
		(
			[ "${OUTDIR}" ] && cd "${OUTDIR}"
			mv ".ubit/${uniq}" .ubit/rootfs 
			rm -rf .ubit/rootfs/.ubit*
		)
	}

	_snapshot_scan () {
		(
			[ "${OUTDIR}" ] && cd "${OUTDIR}"
			cat /usr/share/ubit/start_ubit > .ubit/rootfs/sbin/start_ubit
			chmod u+x .ubit/rootfs/sbin/start_ubit
			_ubit_scan boot modules rootfs
			ready_prepared
		)

		cat /tmp/targets > "${OUTDIR}.ubit/targets"
		umount boot
		statusled idle
	}

	snapshot () {
		_snapshot
		_snapshot_scan
		}

	tarball () {
		local tarball="$1"
		[ "${tarball}" ] || tarball=rootfs
		statusled progress			# this is about to take a long time

		# Because busybox tar is very limited we have to jump through hoops to prevent our tarball copy from recursing

		uniq=`ls ${OUTDIR} | md5sum`
		uniq=${uniq%% *}

		mkdir -p boot     # have to make sure the mount point exists.  e.g. pacman -R kernel26-withlinux will remove the mountpoint
		mount -t ubifs ubi:boot boot

		echo UBIT.TARBALL:extracting rootfs...
		tar -c . --exclude "${uniq}" -f "${OUTDIR}${uniq}"
		mv "${OUTDIR}${uniq}" ${OUTDIR}${tarball}.tar 

		umount boot
		statusled idle
	}
