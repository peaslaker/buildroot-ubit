# The init.rootmount script gets sourced by the parent init script.  
# It abstracts the process of mounting an aufs stacked root filesystem. The presence of the /ubit script
# triggers the process that sets up the necessary ubi nand partition from tarballs provided on the nominal root device.


set - `cat /proc/cmdline`
while [ "$1" ]; do
	case "${1%%=*}" in
	"root")
		rpath=${1#*=}
		;;
	"rootfstype")
		rtype=${1#*=}
		;;
	"rootdelay")
		rdelay=${1#*=}
		;;
	"ubi.mtd")
		useubi=yes
		;;
	"rescue")
		rescue=yes
		;;
		esac
	shift
	done

mkdir -p rw
if [ -z "$rescue" ] && [ "$useubi" ]; then
	[ "$rtype" ] || rtype=auto
	[ "$rdelay" ] && sleep $rdelay
	case "$rtype" in
		"tmpfs")
			mount -t tmpfs none rw
			;;
		"ubifs")
			mount -t ubifs ubi:rootfs rw -o rw,relatime || mount -t tmpfs none rw
			;;
		"auto")
			mount $rpath rw || ( sleep 10; mount $rpath rw ) || mount -t tmpfs none rw
			;;
		*)
			mount -t $rtype $rpath rw || ( sleep 10 ; mount -t $rtype $rpath rw ) || mount -t tmpfs none rw
			;;
		esac	

	# this is a significant cd.  If nothing else happens, this will be our rootfs, come switch_root time.
	cd rw
	# but this is where we try to come up with a clever aufs stacked filesystem
	. /init.aufs

	# if wherever we have ended up has a file containing ubit options and we have ubit, we process them now but we limit the options
	# because we have a mounted aufs partition

	[ -e .ubit.oneshot ] && cat .ubit.oneshot > .ubit.last && rm .ubit.oneshot && cat .ubit.action .ubit.last | /ubit -aufs

else # we are in maintenance mode

	# first we check the installed U-Boot is valid for this ramdisk
	[ -x /ubit ] && (
		nanddump -nol 0x80000 -f /tmp/tmpdump /dev/mtd0 
		for v in /valid.*.md5; do
			cat /tmp/tmpdump | md5sum -c $v -s && {
				echo installed u-boot checksum matches $v
				exit 1
				}
			done
		) && (
		for o in /orig.*.md5 ; do
			cat /tmp/tmpdump | md5sum -c $o -s && {
				target=${o#*orig.};
				echo ${target%.md5} reset | /ubit
				exit 1
				}
			done
		) && echo default reset | /ubit


	echo mounting whatever we find on /dev/sda1
	sleep 10
	mount /dev/sda1 rw
	(	
		cd rw
		# if wherever we have ended up has a file containing ubit options and we have ubit, let's process them  now
		[ -e .ubit.oneshot ] && cat .ubit.oneshot > .ubit.last && rm .ubit.oneshot && cat .ubit.action .ubit.last | /ubit -rw
		)  # drop back out of rw

	umount /dev/sda1

	echo MAINTENANCE SHELL
	echo Current mount points:
	mount
	echo
	echo The /ubit shell contains a number of useful macros for working with 
	echo UBI/UBIFS linux installs.  You can either work interactively 
	echo with UBIT by running /ubit directly or you can provide a script.
	echo
	echo The /ubit shell needs working space for most of its macros.  You should mount
	echo a device and cd into the device before running UBIT macros.  It is your responsibility
	echo to umount the device after you have finished with /ubit
	echo
	echo The UBIT sequence for the initial install of a linux image would be:
	echo
	echo ubiattach_mtd3
	echo install [password]
	echo
	echo LED flash sequences:
	echo 
	echo If you see an Orange heartbeat, this is bad news.  It means the device 
	echo is sitting at a serial console prompt waiting to be rescued from a bad
	echo flash of mtd0.
	echo
	echo The green LED flashes are related to mounting of the root partition and
	echo this maintenance shell.  When commands have completed, the green LED 
	echo should be flashing with a green heartbeat.
	echo 
	echo For details on the orange LED meanings, run the /ubit command.
	echo

		# about to enter the shell, so this is a safe "commands complete" position and gets the green heartbeat
		echo none > /sys/class/leds/status\:orange\:misc/trigger
		echo heartbeat > /sys/class/leds/status\:green\:health/trigger

	exec /bin/ash

		# we should never get here with the shell being an exec on process #1
		# now we are out of the shell it is up to something else to report status.  We just switch off everything
		echo none > /sys/class/leds/status\:orange\:misc/trigger
		echo none > /sys/class/leds/status\:green\:health/trigger

	fi





