#!/bin/bash

UBITVER=v0.5
UBOOTVER=v2010.09-ubit-${UBITVER}
KERNVER=v2.6.37-ubit

BOARDS="goflexnet dockstar"

BUILDDIR="../ubit/builds"
BASEDIR="../ubit/image"
STAGEDIR="../ubit/staging"
UBOOTDIR="../u-boot"
KERNDIR="../linux-2.6"
BRDIR="../buildroot"

TARGDIR=output/target
IMAGEDIR=output/images

SKELDIR=target/device/peaslaker/ubit/target_skeleton
FWDIR=usr/share/ubit/firmware
TARGORIGDIR=${TARGDIR}/usr/share/ubit/original

TARGFWDIR=${TARGDIR}/${FWDIR}
SKELFWDIR=${SKELDIR}/${FWDIR}


	kernelize () {
		(
			cd ${KERNDIR}

			if [ -z "${CROSS_COMPILE}" ]; then
				export ARCH='arm'
				export PATH='/usr/src/buildroot/output/staging/usr/bin':${PATH}
				export CROSS_COMPILE='arm-unknown-linux-uclibcgnueabi-'
				echo "NOW in crosscompile environment for ${ARCH} (${CROSS_COMPILE})"
			else
				echo "ALREADY in crosscompile environment for ${ARCH} (${CROSS_COMPILE})"
				exit 1
			fi

			shorthead=`git rev-parse --verify --short ${KERNVER}`
			if [ $? = 0 ]; then
				KERNNAME="${BUILDDIR}/linux-2.6/${shorthead}"
				mkdir -p "${KERNNAME}"

				if ! [ -f "${KERNNAME}/boot.tar.gz" ] || ! [ -f "${KERNNAME}/modules.tar.gz" ]|| ! [ -f "${KERNNAME}/uImage.md5" ]; then
					if ! ( git checkout ${KERNVER} ); then
						echo Unable to checkout $KERNVER on ${KERNDIR}
						git status
						exit 1
					fi

					make mrproper
					make ubit_defconfig
					if ! ( make -j 12 uImage modules ); then
						echo Kernel build failed
						exit 1
					fi

					rm -rf ${STAGEDIR}
					mkdir -p ${STAGEDIR}
					INSTALL_MOD_PATH=${STAGEDIR} make modules_install
					kver=`ls ${STAGEDIR}/lib/modules`

					mkdir -p ${STAGEDIR}/usr/src/$kver/usr
					(
						cd ${STAGEDIR}/usr/src
						ln -sf $kver linux-2.6
					)

					make headers_install INSTALL_HDR_PATH=${STAGEDIR}/usr/src/$kver/usr

					mkdir -p ${STAGEDIR}/boot/$kver

					cp arch/arm/boot/uImage ${STAGEDIR}/boot/$kver/
					cp .config ${STAGEDIR}/boot/$kver
					(
						cd ${STAGEDIR}/boot
						ln -sf $kver boot
						ln -sf boot/uImage uImage
						echo "`md5sum ./$kver/uImage`" 
					) > ${KERNNAME}/uImage.md5

					tar -C ${STAGEDIR}/boot -c . -zf "${KERNNAME}/boot.tar.gz"
					tar -C ${STAGEDIR} -c lib usr -zf "${KERNNAME}/modules.tar.gz"
					#tar -C ${STAGEDIR} -c lib -zf "${BASEDIR}/modules.tar.gz"
				fi
				cat ${KERNNAME}/uImage.md5 > ${BASEDIR}/checksum.md5
				cat ${KERNNAME}/boot.tar.gz > ${BASEDIR}/boot.tar.gz
				cat ${KERNNAME}/modules.tar.gz > ${BASEDIR}/modules.tar.gz
				( cd $BASEDIR
					md5sum ./boot.tar.gz ./modules.tar.gz >> checksum.md5
				)
			else
				echo "The kernel version ${KERNVER} could not be found in the repository"
				exit 1
			fi
			exit 0
		)
	}

	ubootize () {
		(
			cd ${UBOOTDIR}

			if [ -z "${CROSS_COMPILE}" ]; then
				export ARCH='arm'
				export PATH='/usr/src/buildroot/output/staging/usr/bin':${PATH}
				export CROSS_COMPILE='arm-unknown-linux-uclibcgnueabi-'
				echo "NOW in crosscompile environment for ${ARCH} (${CROSS_COMPILE})"
			else
				echo "ALREADY in crosscompile environment for ${ARCH} (${CROSS_COMPILE})"
				exit 1
			fi

			shorthead=`git rev-parse --verify --short HEAD`
			if [ $? = 0 ]; then
				mkdir -p "${BUILDDIR}/u-boot/${shorthead}"
				for bd in $BOARDS; do
					KWBNAME="${BUILDDIR}/u-boot/${shorthead}/${bd}.kwb"
					if ! [ -f ${KWBNAME} ]; then
						if ! ( git checkout ${UBOOTVER} ); then
							echo Unable to checkout U-Boot $KERNVER on ${KERNDIR}
							git status
							exit 1
						fi

						make mrproper
						make ${bd}_config
						make -j 12 u-boot.kwb
						{
							echo md5="'$(cat u-boot.kwb | dd bs=384K count=1 conv=sync | md5sum)'" 
							echo builddate='"'$(date -u +%Y%m%d%H%M%SUTC)'"'
						} > ${KWBNAME}.log
						cat u-boot.kwb > ${KWBNAME}

						cat tools/env/fw_env.config > ${BRDIR}/${SKELDIR}/etc/fw_env.config
						cat tools/env/fw_env.config > ${BRDIR}/${TARGDIR}/etc/fw_env.config
					fi
					. ${KWBNAME}.log
					echo "${md5}" > ${BRDIR}/${SKELFWDIR}/${bd}.${builddate}-${shorthead}.kwb.md5
					echo "${md5}" > ${BRDIR}/${TARGFWDIR}/${bd}.${builddate}-${shorthead}.kwb.md5
					cat ${KWBNAME} > "${BRDIR}/${TARGFWDIR}/${bd}.kwb"
					cat ${KWBNAME} | dd bs=512K count=1 conv=sync  > "${BASEDIR}/${bd}.kwb"
					cat ${BASEDIR}/${bd}.kwb | md5sum > ${BASEDIR}/valid.${bd}.md5
				done
			else
				echo "The U-Boot version ${UBOOTVER} could not be found in the repository"
				exit 1
			fi
			exit 0
		)
	}

	originalfw_md5 () {
		( 	cd ${TARGORIGDIR}
			for bl in *.kwb; do
				dd if=${bl} bs=512K count=1 conv=sync | md5sum > "$bl.md5"
			done
		)
	}

	fs_additions () {
		(	cd ${TARGDIR}

			mkdir -p proc sys etc/ubit var/run var/lock var/log dev/pts

			# cpio doesn't like its list including non-existent files, so we generate empty files that we want to propagate
			touch etc/ubit/ubimounts
			touch etc/ubit/extramounts
			touch etc/ubit/images

			# at the moment we propagate the latest firmware, but this may not be desirable in the long run
		#	find . ! -iname "*.kwb" | cut -d'.' -f 2- | sort > etc/ubit/cpio_list
			find . | cut -d'.' -f 2- | sort > etc/ubit/cpio_list

			# the ssh keys will always be generated on startup
			{
				echo /etc/ssh_host_key
				echo /etc/ssh_host_rsa_key
				echo /etc/ssh_host_dsa_key
				echo /etc/ssh_host_key.pub
				echo /etc/ssh_host_rsa_key.pub
				echo /etc/ssh_host_dsa_key.pub
			} >> etc/ubit/cpio_list

		)
	}

	create_ramdisk () {
		(	cd ${TARGDIR}
			find . | sort | cpio -H newc -o | gzip
		)  > ${IMAGEDIR}/rootfs.cpio.gz

		ver="UBIT-${UBITVER}`scripts/setlocalversion`"

		# Finally we generated the ramdisk
		mkimage -A arm -O linux -T ramdisk -a 0x0 -e 0x0 -n "${ver}" -d ${IMAGEDIR}/rootfs.cpio.gz ${BASEDIR}/uInitrd
		(
			cd ${BASEDIR}
			md5sum ./uInitrd >> checksum.md5
		)
	}

if ubootize && kernelize; then
	originalfw_md5
	fs_additions
	create_ramdisk
fi







